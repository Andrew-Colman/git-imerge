#! /bin/sh

# This should be executed in a clean working copy of the test repo.

set -e
set -x

BASE="$(dirname "$(cd $(dirname "$0") && pwd)")"
. "$BASE/t/test-lib.sh"

GIT_IMERGE="git-imerge"
TMP="$BASE/t/tmp/conflicted"
DESCRIPTION="git-imerge test repository with conflicts"

# Set up a test repo with two branches, `c` and `d`, that each have a
# commit making incompatible changes to the same file `conflict.txt`:
init_test_repo "$TMP" "$DESCRIPTION"
cd "$TMP"

modify c.txt 0
modify d.txt 0
modify conflict.txt "original version"
commit -m 'm⇒0'

git checkout -b c master --
for i in $(seq 3)
do
    modify c.txt $i
    commit -m "c⇒$i"
done
modify conflict.txt "c version"
commit -m "c conflict"
for i in $(seq 4 8)
do
    modify c.txt $i
    commit -m "c⇒$i"
done

git checkout -b d master --
for i in $(seq 2)
do
    modify d.txt $i
    commit -m "d⇒$i"
done
modify conflict.txt "d version"
commit -m "d conflict"
for i in $(seq 3 5)
do
    modify d.txt $i
    commit -m "d⇒$i"
done

EXPECTED_TREE=17757010e20dad50f089115ae9425414ad00c749

git checkout c
"$GIT_IMERGE" init --name=c-d d
"$GIT_IMERGE" list
"$GIT_IMERGE" diagram --commits --frontier --html=imerge0.html
"$GIT_IMERGE" autofill 2>&1 | tee autofill.out
if grep -q Traceback autofill.out
then
    exit 1
fi
"$GIT_IMERGE" diagram --commits --frontier --html=imerge1.html
"$GIT_IMERGE" continue --edit
echo 'cd version' >conflict.txt
git add conflict.txt
"$GIT_IMERGE" continue --no-edit
"$GIT_IMERGE" diagram --commits --frontier --html=imerge2.html
GIT_EDITOR=cat "$GIT_IMERGE" simplify --goal=merge --branch=c-d-merge
check_tree c-d-merge $EXPECTED_TREE
"$GIT_IMERGE" simplify --goal=rebase --branch=c-d-rebase
check_tree c-d-rebase $EXPECTED_TREE
"$GIT_IMERGE" simplify --goal=rebase-with-history --branch=c-d-rebase-with-history
check_tree c-d-rebase-with-history $EXPECTED_TREE
"$GIT_IMERGE" simplify --goal=border --branch=c-d-border
check_tree c-d-border $EXPECTED_TREE
"$GIT_IMERGE" simplify --goal=border-with-history --branch=c-d-border-with-history
check_tree c-d-border-with-history $EXPECTED_TREE
"$GIT_IMERGE" simplify --goal=border-with-history2 --branch=c-d-border-with-history2
check_tree c-d-border-with-history2 $EXPECTED_TREE
"$GIT_IMERGE" remove

git checkout c
"$GIT_IMERGE" start --goal=full --first-parent --name=c-d d 2>&1 | tee start.out
if grep -q Traceback start.out
then
    exit 1
fi
"$GIT_IMERGE" diagram --commits --frontier --html=imerge3.html
echo 'cd version' >conflict.txt
git add conflict.txt
GIT_EDITOR=cat git commit
"$GIT_IMERGE" continue --edit
"$GIT_IMERGE" diagram --commits --frontier --html=imerge4.html
"$GIT_IMERGE" finish --branch=c-d-full
check_tree c-d-full $EXPECTED_TREE

